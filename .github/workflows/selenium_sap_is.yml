name: Fetch Cookies with Selenium

on:
  workflow_dispatch: # Allows manual triggering from GitHub UI
  # schedule:
  #   - cron: '0 * * * *' # Example: Run every hour at minute 0 (adjust frequency as needed)

jobs:
  fetch-cookies:
    runs-on: ubuntu-latest # Use the latest Ubuntu Linux runner

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4 # Action to get your code from the repository

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '11' # Match this to the `maven.compiler.target` in your pom.xml
        distribution: 'temurin'
        cache: 'maven' # Caches Maven dependencies for faster builds

    - name: Install Google Chrome and ChromeDriver
      # This action automatically installs the correct Linux Chrome and Chromedriver
      # and ensures chromedriver is on the PATH for Selenium.
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: 'stable' # Or a specific version like '120.0.6099.109'

    - name: Run Selenium Script to Fetch Cookies
      id: run_selenium # Assign an ID to this step to reference its output
      env:
        # Pass sensitive data as environment variables to your Java code
        TARGET_URL: ${{ secrets.TARGET_URL }}
        LOGIN_USERNAME: ${{ secrets.LOGIN_USERNAME }}
        LOGIN_PASSWORD: ${{ secrets.LOGIN_PASSWORD }}
      run: |
        echo "Building and running Maven project..."
        # Maven command to clean, compile, and execute your Main class
        # We capture stdout (where your JSON cookies are printed) using awk
        COOKIES_JSON=$(mvn -B clean compile exec:java 2>&1 | awk '/^\{.*\}$/{print; exit}')

        # Check if COOKIES_JSON was empty (meaning the Java script didn't output JSON or failed)
        if [ -z "$COOKIES_JSON" ]; then
          echo "ERROR: No JSON output captured from Selenium script. Review previous logs for Java errors."
          exit 1 # Fail this step if no JSON was captured
        fi

        # Set the captured JSON as an output for subsequent steps to use
        echo "::set-output name=cookies::${COOKIES_JSON}"
        echo "Selenium script executed. Captured cookies."

    - name: Send Cookies to SAP Integration Suite
      # This step will only run if the previous 'run_selenium' step succeeded
      # and if the 'cookies' output from that step is not empty.
      if: success() && steps.run_selenium.outputs.cookies != ''
      run: |
        # Retrieve SAP IS endpoint and credentials from GitHub Secrets
        SAP_IS_ENDPOINT="${{ secrets.SAP_IS_ENDPOINT }}"
        SAP_IS_USERNAME="${{ secrets.SAP_IS_USERNAME }}"
        SAP_IS_PASSWORD="${{ secrets.SAP_IS_PASSWORD }}"

        # Get the cookies payload captured from the previous step
        COOKIES_PAYLOAD="${{ steps.run_selenium.outputs.cookies }}"

        echo "Sending cookies to SAP Integration Suite endpoint: ${SAP_IS_ENDPOINT}"
        curl -X POST \
             -H "Content-Type: application/json" \
             -u "${SAP_IS_USERNAME}:${SAP_IS_PASSWORD}" \
             --data-raw "${COOKIES_PAYLOAD}" \
             "${SAP_IS_ENDPOINT}"

        echo "Successfully sent cookies to SAP Integration Suite."
      env: # Ensure secrets are available to this step's run environment as well
        SAP_IS_ENDPOINT: ${{ secrets.SAP_IS_ENDPOINT }}
        SAP_IS_USERNAME: ${{ secrets.SAP_IS_USERNAME }}
        SAP_IS_PASSWORD: ${{ secrets.SAP_IS_PASSWORD }}