name: Fetch Cookies with Headless Selenium

on:
  workflow_dispatch: # Allows manual triggering from GitHub UI
  # schedule:
  #   - cron: '0 * * * *' # Example: Run every hour at minute 0 (adjust frequency as needed)

jobs:
  fetch-cookies:
    runs-on: ubuntu-latest # Use the latest Ubuntu Linux runner

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4 # Action to get your code from the repository

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '11' # Match this to the `maven.compiler.target` in your pom.xml
        distribution: 'temurin'
        cache: 'maven' # Caches Maven dependencies for faster builds

    - name: Install Google Chrome and ChromeDriver
      # This action automatically installs the correct Linux Chrome and Chromedriver
      # and ensures chromedriver is on the PATH for Selenium.
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: 'stable' # Or a specific version like '120.0.6099.109'

    - name: Run Selenium Script to Fetch Cookies
      id: run_selenium # Assign an ID to this step to reference its output
      env:
        # Pass sensitive data as environment variables to your Java code
        # These secrets must be configured in your GitHub repository settings.
        TARGET_URL: ${{ secrets.TARGET_URL }}
        LOGIN_USERNAME: ${{ secrets.LOGIN_USERNAME }}
        LOGIN_PASSWORD: ${{ secrets.LOGIN_PASSWORD }}
      run: |
        echo "Building and running Maven project..."
        # Create a directory for screenshots to be saved by the Java application
        mkdir -p screenshots

        # Maven command to clean, compile, and execute your Main class.
        # '2>&1 | tee /dev/stderr' ensures that all output (stdout and stderr)
        # is printed to stderr (which GitHub Actions captures in the log)
        # while also allowing 'awk' to process the output for the specific cookie string.
        # We capture the exit code to ensure the step fails if the Java app fails.
        COOKIES_STRING=$(mvn -B clean compile exec:java 2>&1 | tee /dev/stderr | awk '/^([a-zA-Z0-9_]+=.*(; )?)+$/{print; exit}')
        exit_code=$? # Capture the exit code of the mvn command

        # Check if the Maven command itself failed
        if [ $exit_code -ne 0 ]; then
          echo "ERROR: Maven command failed with exit code $exit_code. Review logs for Java errors."
          exit $exit_code # Fail this step with the original exit code
        fi

        # Check if the COOKIES_STRING was captured (meaning the Java script successfully printed cookies)
        if [ -z "$COOKIES_STRING" ]; then
          echo "WARNING: No cookie string output captured from Selenium script. This might be expected if the script failed before printing cookies, or if the output format changed."
          # Do not exit here; allow the artifact upload step to still run if screenshots were taken
        else
          # Set the captured cookie string as an output for subsequent steps to use
          echo "::set-output name=cookies::${COOKIES_STRING}"
          echo "Selenium script executed. Captured cookies."
        fi

    - name: Upload Screenshots (for debugging)
      # This step will always run, even if previous steps failed,
      # ensuring you get debugging information (screenshots) in case of an error.
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: selenium-screenshots # The name of the artifact bundle
        path: screenshots/ # The path to the directory where screenshots are saved
        retention-days: 5 # How long to keep the artifacts (adjust as needed)

    - name: Send Cookies to SAP Integration Suite
      # This step will only run if the 'run_selenium' step succeeded
      # AND if the 'cookies' output from that step is not empty.
      if: success() && steps.run_selenium.outputs.cookies != ''
      run: |
        # Retrieve SAP IS endpoint and credentials from GitHub Secrets
        SAP_IS_ENDPOINT="${{ secrets.SAP_IS_ENDPOINT }}"
        SAP_IS_USERNAME="${{ secrets.SAP_IS_USERNAME }}"
        SAP_IS_PASSWORD="${{ secrets.SAP_IS_PASSWORD }}"

        # Get the cookies payload captured from the previous step
        COOKIES_PAYLOAD="${{ steps.run_selenium.outputs.cookies }}"

        echo "Sending cookies to SAP Integration Suite endpoint: ${SAP_IS_ENDPOINT}"
        # Use curl to send the cookies.
        # Ensure your SAP IS endpoint is configured to accept POST requests
        # with Content-Type: application/json and Basic Authentication.
        curl -X POST \
             -H "Content-Type: application/json" \
             -u "${SAP_IS_USERNAME}:${SAP_IS_PASSWORD}" \
             --data-raw "${COOKIES_PAYLOAD}" \
             "${SAP_IS_ENDPOINT}"

        echo "Successfully sent cookies to SAP Integration Suite."
      env: # Ensure secrets are available to this step's run environment as well
        SAP_IS_ENDPOINT: ${{ secrets.SAP_IS_ENDPOINT }}
        SAP_IS_USERNAME: ${{ secrets.SAP_IS_USERNAME }}
        SAP_IS_PASSWORD: ${{ secrets.SAP_IS_PASSWORD }}
